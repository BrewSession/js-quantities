{"name":"JS-quantities","tagline":"JavaScript library for quantity calculation and unit conversion","body":"#JS-quantities\r\n\r\n[![Build Status](https://travis-ci.org/gentooboontoo/js-quantities.png)](https://travis-ci.org/gentooboontoo/js-quantities)\r\n\r\nJS-quantities is originally a JavaScript port of Kevin Olbrich's library Ruby\r\nUnits (http://ruby-units.rubyforge.org/ruby-units).\r\n\r\nThe library aims to simplify the handling of units for scientific calculations\r\ninvolving quantities.\r\n\r\nJS-quantities is defined as an UMD module and can be used with AMD, Node\r\nand within browsers.\r\n\r\n## Installing JS-quantities\r\n\r\n### Browser\r\n\r\nDownload at [latest release](https://raw.github.com/gentooboontoo/js-quantities/v1.1.0/src/quantities.js).\r\n\r\nYou could also use Bower to install:\r\n\r\n    bower install js-quantities\r\n\r\nThen include it:\r\n\r\n    <script src='quantities.js'></script>\r\n\r\nWhen using [Require.JS](http://requirejs.org/):\r\n\r\n    define(['quantities'], function(Qty) {\r\n      ...\r\n    });\r\n\r\n### Node\r\n\r\n    $ npm install js-quantities\r\n    $ node\r\n    > var Qty = require('js-quantities);\r\n\r\n## Synopsis\r\n\r\n### Creation\r\n\r\nInstances of quantities are made by means of Qty() method. Qty can both be used\r\nas a constructor (with new) or as a factory (without new):\r\n\r\n    qty = new Qty('23 ft'); // constructor\r\n    qty = Qty('23 ft'); // factory\r\n\r\nFor the sake of simplicity, one will use the factory way below but using\r\nnew Qty() is equivalent.\r\n\r\n    qty = Qty('1m'); // => 1 meter\r\n    qty = Qty('m'); // =>  1 meter (scalar defaults to 1)\r\n\r\n    qty = Qty('1 N*m');\r\n    qty = Qty('1 N m'); // * is optional\r\n\r\n    qty = Qty('1 m/s');\r\n\r\n    qty = Qty('1 m^2/s^2');\r\n    qty = Qty('1 m^2 s^-2'); // negative powers\r\n    qty = Qty('1 m2 s-2'); // ^ is optional\r\n\r\n    qty = Qty('1 m^2 kg^2 J^2/s^2 A');\r\n\r\n    qty = Qty('1.5'); // unitless quantity\r\n\r\n    qty = Qty('1 attoparsec/microfortnight');\r\n\r\n### Quantity compatibility, kind and various queries\r\n\r\n    qty1.isCompatible(qty2); // => true or false\r\n\r\n    qty.kind(); // => 'length', 'area', etc...\r\n\r\n    qty.isUnitless(); // => true or false\r\n    qty.isBase(); // => true if quantity is represented with base units\r\n\r\n### Conversion\r\n\r\n    qty.toBase(); // converts to SI units (10 cm => 0.1 m) (new instance)\r\n\r\n    qty.toFloat(): // returns scalar of unitless quantity (otherwise throws error)\r\n\r\n    qty.to('m'); // converts quantity to meter if compatible\r\n                 // or throws an error (new instance)\r\n    qty1.to(qty2); // converts quantity to same unit of qty2 if compatible\r\n                   // or throws an error (new instance)\r\n\r\n    qty.inverse(); // converts quantity to its inverse ('100 m/s' => '.01 s/m')\r\n    // inverses can be used, but there is no special checking to rename the units\r\n    Qty('10ohm').inverse() // '.1/ohm' (not '.1S', although they are equivalent)\r\n    // however, the 'to' command will convert between inverses also\r\n    Qty('10ohm').to('S') // '.1S'\r\n\r\nQty.swiftConverter() could be useful to efficiently convert large array of values. It\r\nconfigures a function accepting a value and converting it.\r\n\r\n    var convert = Qty.swiftConverter('m/h', 'ft/s'); // Configures converter\r\n    var convertedSerie = largeSerie.map(convert); // Usage with map()\r\n    var converted = convert(2500); // Standalone usage\r\n\r\nThe main drawback of this conversion method is that it does not take care of\r\nrounding issues.\r\n\r\n### Comparison\r\n\r\n    qty1.eq(qty2); // => true if both quantities are equal (1m == 100cm => true)\r\n    qty1.same(qty2); // => true if both quantities are same (1m == 100cm => false)\r\n    qty1.lt(qty2); // => true if qty1 is stricty less than qty2\r\n    qty1.lte(qty2); // => true if qty1 is less than or equal to qty2\r\n    qty1.gt(qty2); // => true if qty1 is stricty greater than qty2\r\n    qty1.gte(qty2); // => true if qty1 is greater than or equal to qty2\r\n\r\n    qty1.compareTo(qty2); // => -1 if qty1 < qty2, 0 if qty1 == qty2; 1 if qty1 > qty2\r\n\r\n### Operators\r\n\r\n* add(other): Add. other can be string or quantity. other should be unit compatible.\r\n* sub(other): Substract. other can be string or quantity. other should be unit compatible.\r\n* mul(other): Multiply. other can be string, number or quantity.\r\n* div(other): Divide. other can be string, number or quantity.\r\n\r\n### Rounding\r\n\r\nQty#toPrec(precision) : returns the nearest multiple of quantity passed as precision\r\n\r\n    var qty = Qty('5.17 ft');\r\n    qty.toPrec('ft'); // => 5 ft\r\n    qty.toPrec('0.5 ft'); // => 5 ft\r\n    qty.toPrec('0.25 ft'); // => 5.25 ft\r\n    qty.toPrec('0.1 ft'); // => 5.2 ft\r\n    qty.toPrec('0.05 ft'); // => 5.15 ft\r\n    qty.toPrec('0.01 ft'); // => 5.17 ft\r\n    qty.toPrec('0.00001 ft'); // => 5.17 ft\r\n    qty.toPrec('2 ft'); // => 6 ft\r\n    qty.toPrec('2'); // => 6 ft\r\n\r\n    var qty = Qty('6.3782 m');\r\n    qty.toPrec('dm'); // => 6.4 m\r\n    qty.toPrec('cm'); // => 6.38 m\r\n    qty.toPrec('mm'); // => 6.378 m\r\n    qty.toPrec('5 cm'); // => 6.4 m\r\n    qty.toPrec('10 m'); // => 10 m\r\n    qty.toPrec(0.1); // => 6.3 m\r\n\r\n    var qty = Qty('1.146 MPa');\r\n    qty.toPrec('0.1 bar'); // => 1.15 MPa\r\n\r\n### Formatting quantities\r\n\r\nQty#toString returns a string using the canonical form of the quantity (that\r\nis it could be seamlessly reparsed by Qty).\r\n\r\n    var qty = Qty('1.146 MPa');\r\n    qty.toString(); // => '1.146 MPa'\r\n\r\nAs a shorthand, units could be passed to Qty#toString and is equivalent to\r\nsuccessively call Qty#to then Qty#toString.\r\n\r\n    var qty = Qty('1.146 MPa');\r\n    qty.toString('bar'); // => '11.46 bar'\r\n    qty.to('bar').toString(); // => '11.46 bar'\r\n\r\nQty#toString could also be used with any method from Qty to make some sort of\r\nformatting. For instance, one could use Qty#toPrec to fix the maximum number of\r\ndecimals:\r\n\r\n    var qty = Qty('1.146 MPa');\r\n    qty.toPrec(0.1).toString(); // => '1.1 MPa'\r\n    qty.to('bar').toPrec(0.1).toString(); // => '11.5 bar'\r\n\r\nFor advanced formatting needs as localization, specific rounding or any other\r\ncustom customization, quantities can be transformed into strings through\r\nQty#format according to optional target units and formatter. If target units are\r\nspecified, the quantity is converted into them before formatting.\r\n\r\nSuch a string is not intended to be reparsed to construct a new instance of Qty\r\n(unlike output of Qty#toString).\r\n\r\nIf no formatter is specified, quantities are formatted according to default\r\njs-quantities' formatter and is equivalent to Qty#toString.\r\n\r\n    var qty = Qty('1.1234 m');\r\n    qty.format(); // same units, default formatter => '1.234 m'\r\n    qty.format('cm'); // converted to 'cm', default formatter => '123.45 cm'\r\n\r\nQty#format could delegates formatting to a custom formatter if required. A\r\nformatter is a callback function accepting scalar and units as parameters and\r\nreturning a formatted string representing the quantity.\r\n\r\n    var configurableRoundingFormatter = function(maxDecimals) {\r\n      return function(scalar, units) {\r\n        var pow = Math.pow(10, maxDecimals);\r\n        var rounded = Math.round(scalar * pow) / pow;\r\n\r\n        return rounded + ' ' + units;\r\n      };\r\n    };\r\n\r\n    var qty = Qty('1.1234 m');\r\n\r\n    // same units, custom formatter => '1.12 m'\r\n    qty.format(configurableRoundingFormatter(2));\r\n\r\n    // convert to 'cm', custom formatter => '123.4 cm'\r\n    qty.format('cm', configurableRoundingFormatter(1));\r\n\r\nCustom formatter can be configured globally by setting Qty.formatter.\r\n\r\n    Qty.formatter = configurableRoundingFormatter(2);\r\n    var qty = Qty('1.1234 m');\r\n    qty.format(); // same units, current default formatter => '1.12 m'\r\n\r\n### Temperatures\r\n\r\nLike ruby-units, JS-quantities makes a distinction between a temperature (which technically is a property) and degrees of temperature (which temperatures are measured in).\r\n\r\nTemperature units (i.e., 'tempK') can be converted back and forth, and will take into account the differences in the zero points of the various scales. Differential temperature (e.g., '100 degC') units behave like most other units.\r\n\r\n    Qty('37 tempC').to('tempF')      #=> 98.6 tempF\r\n\r\nJS-quantities will throw an error if you attempt to create a temperature unit that would fall below absolute zero.\r\n\r\nUnit math on temperatures is fairly limited.\r\n\r\n    Qty('100 tempC').add('10 degC')  # 110 tempC\r\n    Qty('100 tempC').sub('10 degC')  # 90 tempC\r\n    Qty('100 tempC').add('50 tempC') # throws error\r\n    Qty('100 tempC').sub('50 tempC') # 50 degC\r\n    Qty('50 tempC').sub('100 tempC') # -50 degC\r\n    Qty('100 tempC').mul(scalar)     # 100*scalar tempC\r\n    Qty('100 tempC').div(scalar)     # 100/scalar tempC\r\n    Qty('100 tempC').mul(qty)        # throws error\r\n    Qty('100 tempC').div(qty)        # throws error\r\n    Qty('100 tempC*unit')            # throws error\r\n    Qty('100 tempC/unit')            # throws error\r\n    Qty('100 unit/tempC')            # throws error\r\n    Qty('100 tempC').inverse()       # throws error\r\n\r\n    Qty('100 tempC').to('degC') #=> 100 degC\r\nThis conversion references the 0 point on the scale of the temperature unit\r\n\r\n    Qty('100 degC').to('tempC') #=> -173.15 tempC\r\nThese conversions are always interpreted as being relative to absolute zero.\r\nConversions are probably better done like this...\r\n\r\n    Qty('0 tempC').add('100 degC') #=> 100 tempC\r\n\r\n### Errors\r\n\r\nEvery error thrown by JS-quantities is an instance of Qty.Error.\r\n\r\n    try {\r\n      // code triggering an error inside JS-quantities\r\n    }\r\n    catch(e) {\r\n      if(e instanceof Qty.Error) {\r\n        // ...\r\n      }\r\n      else {\r\n        // ...\r\n      }\r\n    }\r\n\r\n## Tests\r\n\r\nTests are implemented with Jasmine (https://github.com/pivotal/jasmine).\r\nYou could use both HTML and jasmine-node runners.\r\n\r\nTo execute specs through HTML runner, just open SpecRunner.html file in a\r\nbrowser to execute them.\r\n\r\nTo execute specs through node-jasmine, launch:\r\n\r\n    jasmine-node spec/\r\n\r\n### Performance regression test\r\n\r\nThere is a small benchmarking HTML page to spot performance regression between\r\ncurrently checked-out quantities.js and any committed version.\r\nJust execute:\r\n\r\n    bundle exec rake bench\r\n\r\nthen open http://0.0.0.0:3000/bench\r\n\r\nChecked-out version is benchmarked against HEAD by default but it could be changed by passing\r\nany commit SHA on the command line. Port (default 3000) is also configurable.\r\n\r\n    bundle exec rake bench COMMIT=e0c7fc468 PORT=5000\r\n\r\n## Contribute\r\n\r\nFeedback and contribution are welcomed.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}